{"id":"index.js","dependencies":[{"name":"D:\\courses-projects\\rxjs\\package.json","includedInParent":true,"mtime":1706469586588},{"name":"rxjs","loc":{"line":1,"column":27,"index":27},"parent":"D:\\courses-projects\\rxjs\\src\\index.js","resolved":"D:\\courses-projects\\rxjs\\node_modules\\rxjs\\dist\\esm5\\index.js"}],"generated":{"js":"\"use strict\";\n\nvar _rxjs = require(\"rxjs\");\n// observable should be updated to push data to observers by passing a function to the new observable instance\nvar observable = new _rxjs.Observable(function (subscriber) {\n  // // obervers have no control over observables\n  // // observer function will never run if we don't call the next function\n  // subscriber.next('Hello World');\n  // subscriber.error('Error!');\n  // subscriber.next('test');\n\n  // // manual termination of the observable to avoid memory leakage\n  // // the complete function will prevent the observable from sending any data\n  // // calling a next function after the complete function will have no effect\n  // subscriber.complete();\n  // subscriber.next('next');\n\n  // subscriber.next('test');\n  var id = setInterval(function () {\n    subscriber.next('test');\n    console.log('leak');\n  }, 1000);\n\n  // we can complete the observable without stopping the interval\n  // this causes memory leak as the interval has not stopped although the observer did\n  // completing an observable doesn't mean the contents of the observable have been cleared\n  // memory is still allocated for the observable.. we should clear the memory\n  // subscriber.complete();\n\n  //to clear memory\n  return function () {\n    clearInterval(id);\n  };\n});\n\n// console.log('before');\n\n// the relationship between observables and observers is push based\n// the object we pass in can have up to three functions.. 1- for habdling emitted values | 2- for handling errors | 3- for handling the completion of the observable\n// observers can be partial.. we don't have to define all three functions they are optional\nvar subscription = observable.subscribe({\n  next: function next(value) {\n    // this function is responsible for handling data pushed from the observable\n    // value refers to data emitted by the observable\n    // next can be used to handle a stream of data.. observables don't usually push data all at once\n    console.log(value);\n  },\n  complete: function complete() {\n    console.log('complete called');\n  },\n  error: function error(err) {\n    // if an error is thrown rxjs will terminate the observable and no further functions can be called including the complete function or emit new values\n    // the err argument will store the error produced by the observable\n    console.error(err);\n  }\n});\nsetTimeout(function () {\n  // the unsubscribe function will stop an observer from listening to the observable.. but it won't stop the observable and it can be used by other observers\n  // we should complete or unsubscribe to prevent memory leakage and release memory\n  subscription.unsubscribe();\n}, 4000);\n// console.log('after');"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"index.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":4},"source":"index.js","original":{"line":1,"column":0},"name":"_rxjs"},{"generated":{"line":3,"column":9},"source":"index.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":12},"source":"index.js","original":{"line":1,"column":0},"name":"require"},{"generated":{"line":3,"column":19},"source":"index.js","original":{"line":1,"column":0}},{"generated":{"line":4,"column":0},"source":"index.js","original":{"line":3,"column":0}},{"generated":{"line":5,"column":0},"source":"index.js","original":{"line":4,"column":0}},{"generated":{"line":5,"column":4},"source":"index.js","original":{"line":4,"column":6},"name":"observable"},{"generated":{"line":5,"column":14},"source":"index.js","original":{"line":4,"column":16}},{"generated":{"line":5,"column":17},"source":"index.js","original":{"line":4,"column":19}},{"generated":{"line":5,"column":21},"source":"index.js","original":{"line":4,"column":23},"name":"Observable"},{"generated":{"line":5,"column":37},"source":"index.js","original":{"line":4,"column":33}},{"generated":{"line":5,"column":38},"source":"index.js","original":{"line":4,"column":34}},{"generated":{"line":5,"column":48},"source":"index.js","original":{"line":4,"column":35},"name":"subscriber"},{"generated":{"line":5,"column":58},"source":"index.js","original":{"line":4,"column":45}},{"generated":{"line":5,"column":60},"source":"index.js","original":{"line":4,"column":50}},{"generated":{"line":6,"column":2},"source":"index.js","original":{"line":5,"column":4}},{"generated":{"line":7,"column":2},"source":"index.js","original":{"line":6,"column":4}},{"generated":{"line":8,"column":2},"source":"index.js","original":{"line":7,"column":4}},{"generated":{"line":9,"column":2},"source":"index.js","original":{"line":8,"column":4}},{"generated":{"line":10,"column":2},"source":"index.js","original":{"line":9,"column":4}},{"generated":{"line":12,"column":2},"source":"index.js","original":{"line":11,"column":4}},{"generated":{"line":13,"column":2},"source":"index.js","original":{"line":12,"column":4}},{"generated":{"line":14,"column":2},"source":"index.js","original":{"line":13,"column":4}},{"generated":{"line":15,"column":2},"source":"index.js","original":{"line":14,"column":4}},{"generated":{"line":16,"column":2},"source":"index.js","original":{"line":15,"column":4}},{"generated":{"line":18,"column":2},"source":"index.js","original":{"line":17,"column":4}},{"generated":{"line":19,"column":2},"source":"index.js","original":{"line":18,"column":4}},{"generated":{"line":19,"column":6},"source":"index.js","original":{"line":18,"column":10},"name":"id"},{"generated":{"line":19,"column":8},"source":"index.js","original":{"line":18,"column":12}},{"generated":{"line":19,"column":11},"source":"index.js","original":{"line":18,"column":15},"name":"setInterval"},{"generated":{"line":19,"column":22},"source":"index.js","original":{"line":18,"column":26}},{"generated":{"line":19,"column":23},"source":"index.js","original":{"line":18,"column":27}},{"generated":{"line":19,"column":35},"source":"index.js","original":{"line":18,"column":31}},{"generated":{"line":20,"column":4},"source":"index.js","original":{"line":19,"column":8},"name":"subscriber"},{"generated":{"line":20,"column":14},"source":"index.js","original":{"line":19,"column":18}},{"generated":{"line":20,"column":15},"source":"index.js","original":{"line":19,"column":19},"name":"next"},{"generated":{"line":20,"column":19},"source":"index.js","original":{"line":19,"column":23}},{"generated":{"line":20,"column":20},"source":"index.js","original":{"line":19,"column":24}},{"generated":{"line":20,"column":26},"source":"index.js","original":{"line":19,"column":30}},{"generated":{"line":20,"column":27},"source":"index.js","original":{"line":19,"column":31}},{"generated":{"line":21,"column":4},"source":"index.js","original":{"line":20,"column":8},"name":"console"},{"generated":{"line":21,"column":11},"source":"index.js","original":{"line":20,"column":15}},{"generated":{"line":21,"column":12},"source":"index.js","original":{"line":20,"column":16},"name":"log"},{"generated":{"line":21,"column":15},"source":"index.js","original":{"line":20,"column":19}},{"generated":{"line":21,"column":16},"source":"index.js","original":{"line":20,"column":20}},{"generated":{"line":21,"column":22},"source":"index.js","original":{"line":20,"column":26}},{"generated":{"line":21,"column":23},"source":"index.js","original":{"line":20,"column":27}},{"generated":{"line":22,"column":2},"source":"index.js","original":{"line":21,"column":4}},{"generated":{"line":22,"column":3},"source":"index.js","original":{"line":21,"column":5}},{"generated":{"line":22,"column":5},"source":"index.js","original":{"line":21,"column":7}},{"generated":{"line":22,"column":9},"source":"index.js","original":{"line":21,"column":11}},{"generated":{"line":22,"column":10},"source":"index.js","original":{"line":21,"column":12}},{"generated":{"line":24,"column":2},"source":"index.js","original":{"line":23,"column":4}},{"generated":{"line":25,"column":2},"source":"index.js","original":{"line":24,"column":4}},{"generated":{"line":26,"column":2},"source":"index.js","original":{"line":25,"column":4}},{"generated":{"line":27,"column":2},"source":"index.js","original":{"line":26,"column":4}},{"generated":{"line":28,"column":2},"source":"index.js","original":{"line":27,"column":4}},{"generated":{"line":30,"column":2},"source":"index.js","original":{"line":29,"column":4}},{"generated":{"line":31,"column":2},"source":"index.js","original":{"line":30,"column":4}},{"generated":{"line":31,"column":9},"source":"index.js","original":{"line":30,"column":11}},{"generated":{"line":31,"column":21},"source":"index.js","original":{"line":30,"column":17}},{"generated":{"line":32,"column":4},"source":"index.js","original":{"line":31,"column":8},"name":"clearInterval"},{"generated":{"line":32,"column":17},"source":"index.js","original":{"line":31,"column":21}},{"generated":{"line":32,"column":18},"source":"index.js","original":{"line":31,"column":22},"name":"id"},{"generated":{"line":32,"column":20},"source":"index.js","original":{"line":31,"column":24}},{"generated":{"line":32,"column":21},"source":"index.js","original":{"line":31,"column":25}},{"generated":{"line":33,"column":2},"source":"index.js","original":{"line":32,"column":4}},{"generated":{"line":33,"column":3},"source":"index.js","original":{"line":32,"column":5}},{"generated":{"line":34,"column":0},"source":"index.js","original":{"line":33,"column":0}},{"generated":{"line":34,"column":1},"source":"index.js","original":{"line":33,"column":1}},{"generated":{"line":34,"column":2},"source":"index.js","original":{"line":33,"column":2}},{"generated":{"line":36,"column":0},"source":"index.js","original":{"line":35,"column":0}},{"generated":{"line":38,"column":0},"source":"index.js","original":{"line":37,"column":0}},{"generated":{"line":39,"column":0},"source":"index.js","original":{"line":38,"column":0}},{"generated":{"line":40,"column":0},"source":"index.js","original":{"line":39,"column":0}},{"generated":{"line":41,"column":0},"source":"index.js","original":{"line":40,"column":0}},{"generated":{"line":41,"column":4},"source":"index.js","original":{"line":40,"column":6},"name":"subscription"},{"generated":{"line":41,"column":16},"source":"index.js","original":{"line":40,"column":18}},{"generated":{"line":41,"column":19},"source":"index.js","original":{"line":40,"column":21},"name":"observable"},{"generated":{"line":41,"column":29},"source":"index.js","original":{"line":40,"column":31}},{"generated":{"line":41,"column":30},"source":"index.js","original":{"line":40,"column":32},"name":"subscribe"},{"generated":{"line":41,"column":39},"source":"index.js","original":{"line":40,"column":41}},{"generated":{"line":41,"column":40},"source":"index.js","original":{"line":40,"column":42}},{"generated":{"line":42,"column":2},"source":"index.js","original":{"line":41,"column":4},"name":"next"},{"generated":{"line":42,"column":6},"source":"index.js","original":{"line":41,"column":8}},{"generated":{"line":42,"column":8},"source":"index.js","original":{"line":41,"column":10}},{"generated":{"line":42,"column":17},"source":"index.js","original":{"line":41,"column":10},"name":"next"},{"generated":{"line":42,"column":22},"source":"index.js","original":{"line":41,"column":11},"name":"value"},{"generated":{"line":42,"column":27},"source":"index.js","original":{"line":41,"column":16}},{"generated":{"line":42,"column":29},"source":"index.js","original":{"line":41,"column":21}},{"generated":{"line":43,"column":4},"source":"index.js","original":{"line":42,"column":8}},{"generated":{"line":44,"column":4},"source":"index.js","original":{"line":43,"column":8}},{"generated":{"line":45,"column":4},"source":"index.js","original":{"line":44,"column":8}},{"generated":{"line":46,"column":4},"source":"index.js","original":{"line":45,"column":8},"name":"console"},{"generated":{"line":46,"column":11},"source":"index.js","original":{"line":45,"column":15}},{"generated":{"line":46,"column":12},"source":"index.js","original":{"line":45,"column":16},"name":"log"},{"generated":{"line":46,"column":15},"source":"index.js","original":{"line":45,"column":19}},{"generated":{"line":46,"column":16},"source":"index.js","original":{"line":45,"column":20},"name":"value"},{"generated":{"line":46,"column":21},"source":"index.js","original":{"line":45,"column":25}},{"generated":{"line":46,"column":22},"source":"index.js","original":{"line":45,"column":26}},{"generated":{"line":47,"column":2},"source":"index.js","original":{"line":46,"column":4}},{"generated":{"line":47,"column":3},"source":"index.js","original":{"line":46,"column":5}},{"generated":{"line":48,"column":2},"source":"index.js","original":{"line":47,"column":4},"name":"complete"},{"generated":{"line":48,"column":10},"source":"index.js","original":{"line":47,"column":12}},{"generated":{"line":48,"column":12},"source":"index.js","original":{"line":47,"column":14}},{"generated":{"line":48,"column":21},"source":"index.js","original":{"line":47,"column":14},"name":"complete"},{"generated":{"line":48,"column":30},"source":"index.js","original":{"line":47,"column":14}},{"generated":{"line":48,"column":32},"source":"index.js","original":{"line":47,"column":20}},{"generated":{"line":49,"column":4},"source":"index.js","original":{"line":48,"column":8},"name":"console"},{"generated":{"line":49,"column":11},"source":"index.js","original":{"line":48,"column":15}},{"generated":{"line":49,"column":12},"source":"index.js","original":{"line":48,"column":16},"name":"log"},{"generated":{"line":49,"column":15},"source":"index.js","original":{"line":48,"column":19}},{"generated":{"line":49,"column":16},"source":"index.js","original":{"line":48,"column":20}},{"generated":{"line":49,"column":33},"source":"index.js","original":{"line":48,"column":37}},{"generated":{"line":49,"column":34},"source":"index.js","original":{"line":48,"column":38}},{"generated":{"line":50,"column":2},"source":"index.js","original":{"line":49,"column":4}},{"generated":{"line":50,"column":3},"source":"index.js","original":{"line":49,"column":5}},{"generated":{"line":51,"column":2},"source":"index.js","original":{"line":50,"column":4},"name":"error"},{"generated":{"line":51,"column":7},"source":"index.js","original":{"line":50,"column":9}},{"generated":{"line":51,"column":9},"source":"index.js","original":{"line":50,"column":11}},{"generated":{"line":51,"column":18},"source":"index.js","original":{"line":50,"column":11},"name":"error"},{"generated":{"line":51,"column":24},"source":"index.js","original":{"line":50,"column":12},"name":"err"},{"generated":{"line":51,"column":27},"source":"index.js","original":{"line":50,"column":15}},{"generated":{"line":51,"column":29},"source":"index.js","original":{"line":50,"column":20}},{"generated":{"line":52,"column":4},"source":"index.js","original":{"line":51,"column":8}},{"generated":{"line":53,"column":4},"source":"index.js","original":{"line":52,"column":8}},{"generated":{"line":54,"column":4},"source":"index.js","original":{"line":53,"column":8},"name":"console"},{"generated":{"line":54,"column":11},"source":"index.js","original":{"line":53,"column":15}},{"generated":{"line":54,"column":12},"source":"index.js","original":{"line":53,"column":16},"name":"error"},{"generated":{"line":54,"column":17},"source":"index.js","original":{"line":53,"column":21}},{"generated":{"line":54,"column":18},"source":"index.js","original":{"line":53,"column":22},"name":"err"},{"generated":{"line":54,"column":21},"source":"index.js","original":{"line":53,"column":25}},{"generated":{"line":54,"column":22},"source":"index.js","original":{"line":53,"column":26}},{"generated":{"line":55,"column":2},"source":"index.js","original":{"line":54,"column":4}},{"generated":{"line":56,"column":0},"source":"index.js","original":{"line":55,"column":0}},{"generated":{"line":56,"column":1},"source":"index.js","original":{"line":55,"column":1}},{"generated":{"line":56,"column":2},"source":"index.js","original":{"line":55,"column":2}},{"generated":{"line":57,"column":0},"source":"index.js","original":{"line":57,"column":0},"name":"setTimeout"},{"generated":{"line":57,"column":10},"source":"index.js","original":{"line":57,"column":10}},{"generated":{"line":57,"column":11},"source":"index.js","original":{"line":57,"column":11}},{"generated":{"line":57,"column":23},"source":"index.js","original":{"line":57,"column":15}},{"generated":{"line":58,"column":2},"source":"index.js","original":{"line":58,"column":4}},{"generated":{"line":59,"column":2},"source":"index.js","original":{"line":59,"column":4}},{"generated":{"line":60,"column":2},"source":"index.js","original":{"line":60,"column":4},"name":"subscription"},{"generated":{"line":60,"column":14},"source":"index.js","original":{"line":60,"column":16}},{"generated":{"line":60,"column":15},"source":"index.js","original":{"line":60,"column":17},"name":"unsubscribe"},{"generated":{"line":60,"column":26},"source":"index.js","original":{"line":60,"column":28}},{"generated":{"line":60,"column":27},"source":"index.js","original":{"line":60,"column":29}},{"generated":{"line":60,"column":28},"source":"index.js","original":{"line":60,"column":30}},{"generated":{"line":61,"column":0},"source":"index.js","original":{"line":61,"column":0}},{"generated":{"line":61,"column":1},"source":"index.js","original":{"line":61,"column":1}},{"generated":{"line":61,"column":3},"source":"index.js","original":{"line":61,"column":3}},{"generated":{"line":61,"column":7},"source":"index.js","original":{"line":61,"column":7}},{"generated":{"line":61,"column":8},"source":"index.js","original":{"line":61,"column":8}},{"generated":{"line":62,"column":0},"source":"index.js","original":{"line":62,"column":0}}],"sources":{"index.js":"import { Observable } from \"rxjs\";\r\n\r\n// observable should be updated to push data to observers by passing a function to the new observable instance\r\nconst observable = new Observable((subscriber) => {\r\n    // // obervers have no control over observables\r\n    // // observer function will never run if we don't call the next function\r\n    // subscriber.next('Hello World');\r\n    // subscriber.error('Error!');\r\n    // subscriber.next('test');\r\n\r\n    // // manual termination of the observable to avoid memory leakage\r\n    // // the complete function will prevent the observable from sending any data\r\n    // // calling a next function after the complete function will have no effect\r\n    // subscriber.complete();\r\n    // subscriber.next('next');\r\n\r\n    // subscriber.next('test');\r\n    const id = setInterval(()=>{\r\n        subscriber.next('test');\r\n        console.log('leak');\r\n    }, 1000);\r\n\r\n    // we can complete the observable without stopping the interval\r\n    // this causes memory leak as the interval has not stopped although the observer did\r\n    // completing an observable doesn't mean the contents of the observable have been cleared\r\n    // memory is still allocated for the observable.. we should clear the memory\r\n    // subscriber.complete();\r\n\r\n    //to clear memory\r\n    return () => {\r\n        clearInterval(id);\r\n    }\r\n});\r\n\r\n// console.log('before');\r\n\r\n// the relationship between observables and observers is push based\r\n// the object we pass in can have up to three functions.. 1- for habdling emitted values | 2- for handling errors | 3- for handling the completion of the observable\r\n// observers can be partial.. we don't have to define all three functions they are optional\r\nconst subscription = observable.subscribe({\r\n    next: (value) => {\r\n        // this function is responsible for handling data pushed from the observable\r\n        // value refers to data emitted by the observable\r\n        // next can be used to handle a stream of data.. observables don't usually push data all at once\r\n        console.log(value);\r\n    },\r\n    complete: () => {\r\n        console.log('complete called');\r\n    },\r\n    error: (err) => {\r\n        // if an error is thrown rxjs will terminate the observable and no further functions can be called including the complete function or emit new values\r\n        // the err argument will store the error produced by the observable\r\n        console.error(err);\r\n    }\r\n})\r\n\r\nsetTimeout(()=>{\r\n    // the unsubscribe function will stop an observer from listening to the observable.. but it won't stop the observable and it can be used by other observers\r\n    // we should complete or unsubscribe to prevent memory leakage and release memory\r\n    subscription.unsubscribe();\r\n}, 4000);\r\n// console.log('after');"},"lineCount":null}},"error":null,"hash":"055c79eb38a8e7348f0cf6ab314d3b96","cacheData":{"env":{}}}